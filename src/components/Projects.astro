---
interface Props {
  initialCategory?: string;
}

import GitHub from "./icons/GitHub.astro"
import Link from "./icons/Link.astro"
import LinkButton from "./LinkButton.astro"
import { CATEGORIES, PROJECTS, TAGS } from "../data/projects"

const { initialCategory = "Infografías" } = Astro.props;
---

<div class="mb-8 sticky top-14 md:top-16 z-10">
  <nav class="flex flex-wrap gap-4 justify-center mb-8" id="categories-nav" data-initial-category={initialCategory}>
    <!-- <button 
      class={`category-btn px-4 py-2 rounded-full bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-100 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors ${initialCategory === 'all' ? 'active' : ''}`}
      data-category="all"
    >
      Todos
    </button> -->
    {CATEGORIES.map(category => (
      <button
        class={`category-btn px-4 py-2 rounded-full bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-100 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors ${category === initialCategory ? 'active' : ''}`}
        data-category={category}
      >
        {category}
      </button>
    ))}
  </nav>
</div>

<div class="flex flex-wrap justify-between gap-y-16" id="projects-container">
  {
    PROJECTS.map(({ image, title, description, tags, link, github, cat }) => (
      <article class="flex flex-col md:w-1/3 px-3" data-category={cat}>
        <div class="w-full">
          {image !== '' && (
            <div class="relative aspect-[2/1] flex flex-col items-center col-span-6 row-span-5 gap-8 transition duration-500 ease-in-out transform overflow-clip rounded-md sm:rounded-md md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-400 lg:hover:border-gray-400 lg:hover:bg-gray-800/50">
              <img alt="" class="object-cover object-top w-full h-56 transition duration-500 sm:h-full md:scale-110 md:group-hover:scale-105" loading="lazy" src={image} />
            </div>
          )}
        </div>

        <div class="w-full md:max-w-lg">
          <h3 class="text-2xl text-gray-800 dark:text-gray-100 pt-2">
            {title}
          </h3>
          <div class="flex flex-wrap mt-2">
            {/* <ul class="flex flex-row mb-2 gap-x-2">
                {tags.map((tag) => (
                  <li class="w-full">12
                    <span
                      class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
                    >
                      <tag.icon class="size-4" />
                      {tag.name}
                    </span>
                  </li>
                ))}
              </ul> */}

            <div class="mt-2 text-gray-700 dark:text-gray-400" set:html={description}></div>
            <footer class="flex items-end justify-start mt-4 gap-x-4">
                {github && (
                  <LinkButton href={github}>
                    <GitHub class="size-6" />
                    Code
                    
                  </LinkButton>
                )}
                {link && (
                  <LinkButton href={link}>
                    <Link class="size-4" />
                    {
                      link.includes('rtve') ? 'Ver infografía' : 'Ver el proyecto'
                    }
                  </LinkButton>
                )}
              </footer>
          </div>
        </div>
      </article>
    ))
  }
</div>

<script>
  const categoryButtons = document.querySelectorAll('.category-btn');
  const projectsContainer = document.getElementById('projects-container');
  const categoriesNav = document.getElementById('categories-nav');
  const initialCategory = categoriesNav?.dataset.initialCategory;

  if (projectsContainer && initialCategory) {
    const projects = projectsContainer.getElementsByTagName('article');

    // Filtrar proyectos según la categoría inicial
    Array.from(projects).forEach((project: Element) => {
      const category = (project as HTMLElement).dataset.category;
      if (initialCategory !== 'all' && category !== initialCategory) {
        (project as HTMLElement).style.display = 'none';
      }
    });

    categoryButtons.forEach((button: Element) => {
      button.addEventListener('click', () => {
        // Remove active class from all buttons
        categoryButtons.forEach(btn => btn.classList.remove('active'));
        // Add active class to clicked button
        button.classList.add('active');

        const selectedCategory = (button as HTMLElement).dataset.category;

        // Scroll suave al primer proyecto visible
        const firstProject = Array.from(projects).find((project: Element) => {
          return selectedCategory === 'all' || (project as HTMLElement).dataset.category === selectedCategory;
        });

        Array.from(projects).forEach((project: Element) => {
          if (selectedCategory === 'all' || (project as HTMLElement).dataset.category === selectedCategory) {
            (project as HTMLElement).style.display = '';
          } else {
            (project as HTMLElement).style.display = 'none';
          }
        });

        // Si encontramos un proyecto, hacemos scroll hasta él
        if (firstProject) {
          const yOffset = -200; // Ajuste para compensar el header fijo
          const y = firstProject.getBoundingClientRect().top + window.pageYOffset + yOffset;

          window.scrollTo({
            top: y,
            behavior: 'smooth'
          });
        }
      });
    });
  }
</script>

<style>
  .category-btn.active {
    background-color: #077ea4;
    color: white;
  }
</style>
